= PostgreSQLで\n高速・高機能な日本語\n全文検索

: author
   堀本泰弘
: institution
   株式会社クリアコード
: content-source
   July Tech Festa 2021 winter
: date
   2021-01-24
: allotted-time
   25m
: start-time
   2021-01-24T14:20:00+09:00
: end-time
   2021-01-24T14:40:00+09:00
: theme
   .

= 自己紹介

  # image
  # src = images/self-introduction.png
  # relative_height = 107

= 今日のテーマ

PostgreSQLで\n((*高速*))・((*高機能*))な日本語全文検索

= 全文検索？

((*全*))ての((*文*))書から特定の文字列を\n((*検索*))する

= 全文検索？

  * Web検索(Google)
  * ファイル内検索(grep)

= 全文検索の対象

(('tag:center'))
(('tag:large'))
(('tag:margin-bottom * 2'))
大量のテキスト

  * 例：Redmineのwiki・チケット
  * 例：チャットログ
  * 例：口コミ

= 参考

* Redmineでは既にPGroongaを使った全文検索をするプラグインがある

  * https://github.com/clear-code/redmine_full_text_search
  * https://www.slideshare.net/kou/redminetokyo12

= PostgreSQLの全文検索

* LIKE：組み込み
* textsearch：組み込み

= PostgreSQLの全文検索

  # RT
  delimiter = [|]

  id | title | content

  1 | Groongaで高速\n全文検索 | 高速に\n全文検索したい！

= LIKE

# coderay sql

  SELECT title FROM entries
    WHERE
      title LIKE '%検索%' OR
      content LIKE '%検索%';

= LIKE

* メリット

  * 標準で使える
  * インデックス作成不要(データ更新が遅くならない)
  * データが少なければ十分高速

= LIKE

* デメリット

  * データ量に比例して遅くなる
  * 検索以外の機能(類似文書検索、同義語検索等)は無い

= textsearch

* メリット

  * 標準で使える
  * インデックスを作成するので、データ量が多くても高速

= textsearch

* デメリット

  * 言語毎にモジュールが必要
    * 英語やフランス語のモジュールは組み込み
    * 日本語は別途必要

= PGroongaを使った全文検索

= PGroonga？

読み方

= PGroonga？

PGroonga\n
(ぴ−じーるんが)

= PGroonga？

PostgreSQLで\n((*高速・高機能な*))全文検索を実現\nする拡張

= PGroongaの特徴

(1) ((*簡単*))に使える
(2) ((*速い*))
(3) ((*全言語*))対応

= 使い方

  # image
  # src = images/pgroonga-sql.png
  # relative_height = 107

= 使い方

実際に全文検索\nしてみましょう

= 実行例：テーブル定義

  # coderay sql

  CREATE TABLE entries (
    title text,
    content text
  );

= 実行例：\nインデックス定義

  # coderay sql

  -- 全文検索用インデックス
  CREATE INDEX entries_full_text_search
    ON entries
    --「USING pgroonga」=「PGroongaを使う」
    USING pgroonga (title, content);

= 実行例：データ挿入

  # coderay sql

  -- 普通に挿入するだけでよい
  INSERT INTO entries
    VALUES ('PGroongaで高速全文検索！',
            '高速に全文検索したいですね！');

= 実行例：全文検索

  # coderay sql

  SELECT title FROM entries
    WHERE
  -- &@~で全文検索
  -- 「検索」と「高速」をAND検索
      title &@~ '検索 高速' OR
      content &@~ '検索 高速';

= 実行例：LIKE

  # coderay sql

  SELECT title FROM entries
    WHERE
  -- LIKEでもインデックスが効く
  --＝アプリを書き換えずに高速化可能
  -- ただし&@~より性能が落ちる
      title LIKE '%検索%' OR
      content LIKE '%検索%';

= 使い方

((*簡単*))ですね！

= 速度

* 安定して速い

= 速度

追加されたデータは((*即時*))検索可能

= 速度

つまり

= 速度

検索可能になるのが((*速い*))

= 速度

更新中も検索性能が((*落ちない*))

= 速度

ヒット数が多くても検索性能が\n((*落ちない*))

= 速度

もちろん\n検索も((*速い*))

= ベンチマーク



= 機能

* 全文検索に必要そうな機能は\n一通り揃っている
  * 同義語検索
  * 類似文書検索
  * 読みがな検索
  * 入力補完 etc..

= 読みがな検索

「やきにく」\nってどう書きますか？

= 読みがな検索

* やきにく
* 焼き肉
* 焼肉
* やき肉
* ヤキニク

= 読みがな検索

当然ですがどれも「やきにく」と読みます

= 読みがな検索

* 読みが同じなので、以下は全部同じものとして扱えます
  * やきにく
  * 焼き肉
  * 焼肉
  * やき肉
  * ヤキニク

= 読みがな検索

例えば\n「やきにく」で検索すると

= 読みがな検索

* 「やきにく」((*Hit!*))
* 「焼き肉」((*Hit!*))
* 「焼肉」((*Hit!*))
* 「やき肉」((*Hit!*))
* 「ヤキニク」((*Hit!*))

= 読みがな検索

異体字

= 読みがな検索

「広」と「廣」

= 読みがな検索

例えば人名の\n検索

= 読みがな検索

検索キーワード「広瀬」で
  * 「広瀬」((*Hit*))
  * 「廣瀬」((*Hit*))
となってほしい

= 読みがな検索

通常の検索\n
検索キーワード「広瀬」で
  * 「広瀬」のみ((*Hit*))

= 読みがな検索

読みがな検索なら\n
検索キーワード「広瀬」で
  * 「広瀬」((*Hit*))
  * 「廣瀬」((*Hit*))

= 読みがな検索

両方ヒット！

= 読みがな検索

「広瀬」も\n「廣瀬」も\n読みが同じ

= 他にも

* それっぽい順でソート
* キーワードハイライト
* キーワードの周辺テキスト表示

= 他にも

* 電話番号検索
  * 090-1234-5678 と 090 1234 5678、(090)1234-5678 等
* fuzzy検索
  * typo対策
    * テクノロジーとテノクロジー

= まとめ

PGroongaで\n((*高速高機能*))な\n日本語全文検索が実現できます！
